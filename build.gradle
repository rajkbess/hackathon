import java.nio.file.Files

buildscript {
    ext.corda_release_group = 'net.corda'
    ext.corda_release_version = 'hackathon-temp'
    ext.corda_gradle_plugins_version = '4.0.29'
    ext.kotlin_version = '1.2.51'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.9'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir "config/dev"
        }
    }
    test {
        resources {
            srcDir "config/test"
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile "$corda_release_group:corda-webserver-impl:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"

    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    // CorDapp dependencies
    // Specify your CorDapp's dependencies below, including dependent CorDapps.
    // We've defined Cash as a dependent CorDapp as an example.
    cordapp project(":cordapp")
    cordapp project(":cordapp-contracts-states")
    cordapp project(":bno")
    cordapp "$corda_release_group:corda-finance:$corda_release_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10004")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
    }
    node {
        name "O=BNO-DTN,L=New York,C=US"
        p2pPort 10010
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost:10012")
        }
        webPort 10013
        cordapps = [
                "$project.group:bno:$project.version",
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=CLIENT-C01,L=London,C=GB"
        p2pPort 10020
        rpcSettings {
            address("localhost:10021")
            adminAddress("localhost:10022")
        }
        webPort 10023
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=CLIENT-C02,L=London,C=GB"
        p2pPort 10030
        rpcSettings {
            address("localhost:10031")
            adminAddress("localhost:10032")
        }
        webPort 10033
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=CLIENT-C03,L=London,C=GB"
        p2pPort 10040
        rpcSettings {
            address("localhost:10041")
            adminAddress("localhost:10042")
        }
        webPort 10043
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=CLIENT-C04,L=London,C=GB"
        p2pPort 10050
        rpcSettings {
            address("localhost:10051")
            adminAddress("localhost:10052")
        }
        webPort 10053
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=CLIENT-C05,L=London,C=GB"
        p2pPort 10060
        rpcSettings {
            address("localhost:10061")
            adminAddress("localhost:10062")
        }
        webPort 10063
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=DEALER-D01,L=New York,C=US"
        p2pPort 10070
        rpcSettings {
            address("localhost:10071")
            adminAddress("localhost:10072")
        }
        webPort 10073
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=DEALER-D02,L=New York,C=US"
        p2pPort 10080
        rpcSettings {
            address("localhost:10081")
            adminAddress("localhost:10082")
        }
        webPort 10083
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=DEALER-D03,L=New York,C=US"
        p2pPort 10090
        rpcSettings {
            address("localhost:10091")
            adminAddress("localhost:10092")
        }
        webPort 10093
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=CCP-P01,L=New York,C=US"
        p2pPort 10100
        rpcSettings {
            address("localhost:10101")
            adminAddress("localhost:10102")
        }
        webPort 10103
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    doLast {
        def cdmSupportJarName = 'cdm-support-0.1.jar'
        def cdmSupportContractsStatesJarName = 'cdm-support-contracts-states-0.1.jar'

        def cdmSupportJar = new File(new File('./lib/' + cdmSupportJarName).absolutePath)
        def cdmSupportContractsStatesJar = new File(new File('./lib/' + cdmSupportContractsStatesJarName).absolutePath)

        def cordappsPaths = []

        fileTree("build/nodes").visit { FileVisitDetails details ->
            if(details.isDirectory() && details.name == 'cordapps') {
                cordappsPaths << details.file
            }
        }

        cordappsPaths.each {File cordappsPath ->
            println 'Copying cdm jars to ' + cordappsPath.toPath()

            Files.copy(cdmSupportJar.toPath(), new File(cordappsPath,cdmSupportJarName).toPath())
            Files.copy(cdmSupportContractsStatesJar.toPath(), new File(cordappsPath,cdmSupportContractsStatesJarName).toPath())

        }
    }
}
